// Firebase Security Rules for LocalMart (TownTap)
// These rules implement the security model as specified in the LocalMart requirements

// Firestore Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check user type from users collection
    function getUserType() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.user_type;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && getUserType() == 'admin';
    }

    // Helper function to check if user is business owner
    function isBusiness() {
      return isAuthenticated() && getUserType() == 'business';
    }

    // Helper function to check if business exists and user owns it
    function ownsBusiness(businessId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/businesses/$(businessId)) &&
             get(/databases/$(database)/documents/businesses/$(businessId)).data.owner_id == request.auth.uid;
    }

    // Users collection - users can only read/write their own profile
    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false; // Users cannot delete their own profiles
    }

    // Businesses collection
    match /businesses/{businessId} {
      // Anyone can read approved, active businesses
      allow read: if resource.data.is_approved == true && resource.data.status == 'active';
      
      // Business owners can read their own business (even if not approved)
      allow read: if isAuthenticated() && resource.data.owner_id == request.auth.uid;
      
      // Only business users can create businesses
      allow create: if isBusiness() && 
                       request.auth.uid == request.resource.data.owner_id &&
                       request.resource.data.is_approved == false &&
                       request.resource.data.status == 'pending_approval';
      
      // Business owners can update their own businesses
      allow update: if isAuthenticated() && resource.data.owner_id == request.auth.uid;
      
      // Only admins can delete businesses
      allow delete: if isAdmin();
    }

    // Products collection (Type A businesses)
    match /products/{productId} {
      // Anyone can read available products
      allow read: if resource.data.is_available == true;
      
      // Business owners can read all their products
      allow read: if ownsBusiness(resource.data.business_id);
      
      // Business owners can create products for their business
      allow create: if ownsBusiness(request.resource.data.business_id);
      
      // Business owners can update/delete their own products
      allow update, delete: if ownsBusiness(resource.data.business_id);
    }

    // Services collection (Type B businesses)
    match /services/{serviceId} {
      // Anyone can read available services
      allow read: if resource.data.is_available == true;
      
      // Business owners can read all their services
      allow read: if ownsBusiness(resource.data.business_id);
      
      // Business owners can create services for their business
      allow create: if ownsBusiness(request.resource.data.business_id);
      
      // Business owners can update/delete their own services
      allow update, delete: if ownsBusiness(resource.data.business_id);
    }

    // Orders collection (Type A)
    match /orders/{orderId} {
      // Customers can read their own orders
      allow read: if isAuthenticated() && resource.data.customer_id == request.auth.uid;
      
      // Business owners can read orders for their business
      allow read: if ownsBusiness(resource.data.business_id);
      
      // Customers can create orders for themselves
      allow create: if isAuthenticated() && request.resource.data.customer_id == request.auth.uid;
      
      // Customers can update their own orders (limited fields like cancellation)
      allow update: if isAuthenticated() && 
                       resource.data.customer_id == request.auth.uid &&
                       request.resource.data.customer_id == resource.data.customer_id;
      
      // Business owners can update orders for their business (status changes)
      allow update: if ownsBusiness(resource.data.business_id);
      
      // Orders cannot be deleted
      allow delete: if false;
    }

    // Service Requests collection (Type B)
    match /service_requests/{requestId} {
      // Customers can read their own service requests
      allow read: if isAuthenticated() && resource.data.customer_id == request.auth.uid;
      
      // Business owners can read service requests for their business
      allow read: if ownsBusiness(resource.data.business_id);
      
      // Customers can create service requests
      allow create: if isAuthenticated() && request.resource.data.customer_id == request.auth.uid;
      
      // Customers can update their own service requests (limited fields)
      allow update: if isAuthenticated() && 
                       resource.data.customer_id == request.auth.uid &&
                       request.resource.data.customer_id == resource.data.customer_id;
      
      // Business owners can update service requests for their business
      allow update: if ownsBusiness(resource.data.business_id);
      
      // Service requests cannot be deleted
      allow delete: if false;
    }

    // Inquiries collection (Type C)
    match /inquiries/{inquiryId} {
      // Customers can read their own inquiries
      allow read: if isAuthenticated() && resource.data.customer_id == request.auth.uid;
      
      // Business owners can read inquiries for their business
      allow read: if ownsBusiness(resource.data.business_id);
      
      // Customers can create inquiries
      allow create: if isAuthenticated() && request.resource.data.customer_id == request.auth.uid;
      
      // Customers can update their own inquiries (limited fields)
      allow update: if isAuthenticated() && 
                       resource.data.customer_id == request.auth.uid &&
                       request.resource.data.customer_id == resource.data.customer_id;
      
      // Business owners can update inquiries for their business
      allow update: if ownsBusiness(resource.data.business_id);
      
      // Inquiries cannot be deleted
      allow delete: if false;
    }

    // Reviews collection
    match /reviews/{reviewId} {
      // Anyone can read reviews
      allow read: if true;
      
      // Customers can create reviews for their completed orders/services
      allow create: if isAuthenticated() && request.resource.data.customer_id == request.auth.uid;
      
      // Customers can update their own reviews (limited time window could be added)
      allow update: if isAuthenticated() && resource.data.customer_id == request.auth.uid;
      
      // Reviews cannot be deleted (for transparency)
      allow delete: if false;
    }

    // Categories collection
    match /categories/{categoryId} {
      // Anyone can read active categories
      allow read: if resource.data.is_active == true;
      
      // Only admins can create, update, delete categories
      allow create, update, delete: if isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && resource.data.recipient_id == request.auth.uid;
      
      // Users can update their own notifications (mark as read)
      allow update: if isAuthenticated() && 
                       resource.data.recipient_id == request.auth.uid &&
                       request.resource.data.recipient_id == resource.data.recipient_id;
      
      // System and businesses can create notifications (handled via functions)
      allow create: if isAuthenticated();
      
      // Notifications cannot be deleted
      allow delete: if false;
    }

    // Payouts collection
    match /payouts/{payoutId} {
      // Business owners can read their own payouts
      allow read: if ownsBusiness(resource.data.business_id);
      
      // Only admins can create, update payouts
      allow create, update: if isAdmin();
      
      // Payouts cannot be deleted
      allow delete: if false;
    }

    // Admin can read/write everything (super admin access)
    match /{path=**} {
      allow read, write: if isAdmin();
    }
  }
}

// Firebase Storage Rules
service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the file
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if file size is within limits
    function validFileSize(maxSizeMB) {
      return request.resource.size < maxSizeMB * 1024 * 1024;
    }

    // Helper function to check if file is an image
    function isImage() {
      return request.resource.contentType.matches('image/.*');
    }

    // Public assets (app icons, banners, etc.)
    match /public/{allPaths=**} {
      allow read: if true;
      allow write: if false; // Only admin via functions
    }

    // User profile pictures
    match /profile_pictures/{userId}/{fileName} {
      allow read: if true; // Profile pictures are public
      allow write: if isOwner(userId) && isImage() && validFileSize(5); // 5MB limit
    }

    // Business assets (logos, banners, product images, etc.)
    match /business_assets/{businessId}/{fileType}/{fileName} {
      allow read: if true; // Business assets are public for customers to see
      
      // Only business owners can upload their assets
      allow write: if isAuthenticated() && 
                      get(/databases/(default)/documents/businesses/$(businessId)).data.owner_id == request.auth.uid &&
                      isImage() && 
                      validFileSize(10); // 10MB limit for business assets
    }

    // Order/Service request attachments (photos, documents)
    match /attachments/{type}/{requestId}/{fileName} {
      // Only the customer who created the request or business handling it can read
      allow read: if isAuthenticated() && (
        get(/databases/(default)/documents/$(type)/$(requestId)).data.customer_id == request.auth.uid ||
        get(/databases/(default)/documents/businesses/$(get(/databases/(default)/documents/$(type)/$(requestId)).data.business_id)).data.owner_id == request.auth.uid
      );
      
      // Only customers can upload attachments to their requests
      allow write: if isAuthenticated() && 
                      get(/databases/(default)/documents/$(type)/$(requestId)).data.customer_id == request.auth.uid &&
                      validFileSize(25); // 25MB limit for attachments
    }

    // Admin can read/write everything
    match /{allPaths=**} {
      allow read, write: if isAuthenticated() && 
                            get(/databases/(default)/documents/users/$(request.auth.uid)).data.user_type == 'admin';
    }
  }
}